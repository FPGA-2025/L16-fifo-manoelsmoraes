module fifo (
    input wire clk,
    input wire rstn,
    input wire wr_en,
    input wire rd_en,
    input wire [7:0] data_in,
    output reg [7:0] data_out,
    output reg full,
    output reg empty
);

    // Definindo os ponteiros de leitura e escrita
    reg [1:0] w_ptr, r_ptr;  // Ponteiros de 2 bits para acessar as 4 posições (2^2 = 4)
    reg [7:0] mem [0:3];     // Memória de 4 posições, 8 bits por posição
    
    // Lógica de controle de leitura e escrita
    always @(posedge clk or negedge rstn) begin
        if (!rstn) begin
            w_ptr <= 2'b00;  // Resetando o ponteiro de escrita
            r_ptr <= 2'b00;  // Resetando o ponteiro de leitura
            data_out <= 8'b0; // Resetando a saída de dados
            full <= 1'b0;     // FIFO não cheia após o reset
            empty <= 1'b1;    // FIFO vazia após o reset
        end else begin
            // Escrita na FIFO
            if (wr_en && !full) begin
                mem[w_ptr] <= data_in;  // Armazena o dado na posição de escrita
                w_ptr <= w_ptr + 1'b1;  // Avança o ponteiro de escrita
            end
            
            // Leitura da FIFO
            if (rd_en && !empty) begin
                data_out <= mem[r_ptr];  // Lê o dado na posição de leitura
                r_ptr <= r_ptr + 1'b1;   // Avança o ponteiro de leitura
            end
            
            // Controle do estado de cheio e vazio
            if (w_ptr == r_ptr) begin
                empty <= 1'b1;  // FIFO vazia
            end else begin
                empty <= 1'b0;  // FIFO não vazia
            end
            
            if ((w_ptr + 1'b1) == r_ptr) begin
                full <= 1'b1;  // FIFO cheia
            end else begin
                full <= 1'b0;  // FIFO não cheia
            end
        end
    end

endmodule
